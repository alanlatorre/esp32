#include <Keypad.h>

const uint8_t ROWS = 4;
const uint8_t COLS = 4;

char keys[ROWS][COLS] = {
  { '2', '1', '2', '3' },
  { '5', '4', '5', '6' },
  { '-', '7', '8', '9' },
  { '-', '-', '-', '-' }
};

uint8_t colPins[COLS] = { 16, 4, 2, 15 };
uint8_t rowPins[ROWS] = { 19, 18, 5, 17 };

void init_matriz (char keys [COLS][ROWS]);
void init_game (char keys [COLS][ROWS]);
int llenar_matriz (char keys [COLS][ROWS], char turno,int num);
void first_game (char keys [COLS][ROWS]);
void check_matriz (char keys [COLS][ROWS]);

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
int cant = 0 ;
char turno;

void setup() {
  Serial.begin(9600);

  init_matriz (keys);
}

void loop() {

  turno = 'x';
  Serial.println ("pulse un boton del 1 al 9");

  /*if (cant>=3)
  {
    check_matriz (keys);
  }/**/
  
  Serial.println (cant);
  llenar_matriz (keys,turno,num);

  cant++;
  delay (1000);
}

void init_matriz (char keys [COLS][ROWS])
{
  Serial.println ("estoy dentro de init_matriz");

}

int llenar_matriz (char keys [COLS][ROWS], char turno,int num)
{
  int sig = 0;

  char key = keypad.getKey();
  
  switch (key) {
    case '1': keys [0][1] == 'turno'; Serial.println (keys [0][1]);
    case '2': keys [0][2] == 'turno';
    case '3': keys [0][3] == 'turno';
    case '4': keys [1][1] == 'turno';
    case '5': keys [1][2] == 'turno';
    case '6': keys [1][3] == 'turno';
    case '7': keys [2][1] == 'turno';
    case '8': keys [2][2] == 'turno';
    case '9': keys [2][3] == 'turno'; 

  }

  return sig;
}
