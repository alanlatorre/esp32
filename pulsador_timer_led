#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include "freertos/freeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_timer.h"

#define pulsador 15
#define led 4

enum estados
{
	suelto,
	pulsando,
	apretado,
	soltando,
} ;

typedef enum estados estado ;

struct fsm
{
	estado estado_actual;
	bool estado_led;
} ;

struct fsm fsm = { .estado_actual = suelto, .estado_led = 0};



bool level = 0 ;

bool leer_pin (void)
{
	return (gpio_get_level (15));
}

void periodo (float ttotal)
{

		printf ("ttotal dentro es: %f\n %d", ttotal, fsm.estado_led); //muestreo para verificar en monitor
		gpio_set_level (4, fsm.estado_led);
		fsm.estado_led =!fsm.estado_led ;
}


void app_main(void)
{
	bool entrada, primer_periodo = 1;
	float t_on= 0, t_off = 0, t_actual = 0, t_actualizado = 0;
	float ttotal = 1000;

	gpio_set_direction (15, GPIO_MODE_INPUT);
	gpio_set_direction (4, GPIO_MODE_OUTPUT);
	gpio_set_pull_mode (15, GPIO_PULLDOWN_ONLY);
	gpio_set_level 		(4, 0);

    while (true)
    {
    	t_actual = esp_timer_get_time () / 1000;

    	entrada = leer_pin ();

    	switch (fsm.estado_actual)
    	{
    		case suelto:
    			if (entrada == 1)
    				{
    				fsm.estado_actual = pulsando;
    				t_on = esp_timer_get_time () /1000;
    				primer_periodo = 0;

    				}
    			break;

    		case pulsando:
    			if (entrada == 0)
    				{
    				fsm.estado_actual = suelto;
    				}
    			else
    				fsm.estado_actual = apretado;

    			break;

    		case apretado:
    			if (entrada == 0)
    				{
    				fsm.estado_actual = soltando;
    				}
    			break;

    		case soltando:
    			if (entrada == 0)
    			{
    				fsm.estado_actual = suelto;
    				t_off = esp_timer_get_time () /1000;
    				ttotal = t_off - t_on ;
    			}
    			else
    				fsm.estado_actual = apretado;

    			break;
    	}



    	if (t_actual - t_actualizado > ttotal)
    	{
    		t_actualizado = t_actual;

    	if (primer_periodo == 1)
    	{
    		ttotal = 1000;
    	}

    	periodo (ttotal);

    	//printf ("t_on es: %0.2f\n",t_on);
    	//printf ("t_off es: %0.2f\n", t_off);
    	//printf ("ttotal es: %0.2f\n", ttotal); muestreo para verificar datos
    	}

    	vTaskDelay(pdMS_TO_TICKS(9));


    }
}
